{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar WebSocketService = function () {\n  function WebSocketService() {\n    _classCallCheck(this, WebSocketService);\n    this.ws = null;\n    this.isConnected = false;\n    this.messageListeners = [];\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectInterval = 3000;\n  }\n  return _createClass(WebSocketService, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this = this;\n      var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'ws://localhost:8080';\n      try {\n        this.ws = new WebSocket(url);\n        this.ws.onopen = function () {\n          console.log('WebSocket connected');\n          _this.isConnected = true;\n          _this.reconnectAttempts = 0;\n          _this.notifyConnectionStatus('Connected');\n        };\n        this.ws.onmessage = function (event) {\n          try {\n            var message = JSON.parse(event.data);\n            console.log('Received WebSocket message:', message);\n            _this.messageListeners.forEach(function (callback) {\n              callback(message);\n            });\n          } catch (error) {\n            console.error('Error parsing WebSocket message:', error);\n          }\n        };\n        this.ws.onclose = function () {\n          console.log('WebSocket connection closed');\n          _this.isConnected = false;\n          _this.notifyConnectionStatus('Disconnected');\n          _this.attemptReconnect();\n        };\n        this.ws.onerror = function (error) {\n          console.error('WebSocket error:', error);\n          _this.isConnected = false;\n          _this.notifyConnectionStatus('Error');\n        };\n      } catch (error) {\n        console.error('Failed to create WebSocket connection:', error);\n        this.notifyConnectionStatus('Failed to Connect');\n      }\n    }\n  }, {\n    key: \"attemptReconnect\",\n    value: function attemptReconnect() {\n      var _this2 = this;\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.reconnectAttempts++;\n        console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n        this.notifyConnectionStatus('Reconnecting...');\n        setTimeout(function () {\n          _this2.connect();\n        }, this.reconnectInterval);\n      } else {\n        console.log('Max reconnection attempts reached');\n        this.notifyConnectionStatus('Connection Failed');\n      }\n    }\n  }, {\n    key: \"addMessageListener\",\n    value: function addMessageListener(callback) {\n      this.messageListeners.push(callback);\n    }\n  }, {\n    key: \"removeMessageListener\",\n    value: function removeMessageListener(callback) {\n      var index = this.messageListeners.indexOf(callback);\n      if (index > -1) {\n        this.messageListeners.splice(index, 1);\n      }\n    }\n  }, {\n    key: \"notifyConnectionStatus\",\n    value: function notifyConnectionStatus(status) {\n      this.connectionStatusListeners = this.connectionStatusListeners || [];\n      this.connectionStatusListeners.forEach(function (callback) {\n        return callback(status);\n      });\n    }\n  }, {\n    key: \"addConnectionStatusListener\",\n    value: function addConnectionStatusListener(callback) {\n      this.connectionStatusListeners = this.connectionStatusListeners || [];\n      this.connectionStatusListeners.push(callback);\n    }\n  }, {\n    key: \"removeConnectionStatusListener\",\n    value: function removeConnectionStatusListener(callback) {\n      if (this.connectionStatusListeners) {\n        var index = this.connectionStatusListeners.indexOf(callback);\n        if (index > -1) {\n          this.connectionStatusListeners.splice(index, 1);\n        }\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.ws) {\n        this.ws.close();\n        this.ws = null;\n        this.isConnected = false;\n        this.messageListeners = [];\n        this.connectionStatusListeners = [];\n      }\n    }\n  }, {\n    key: \"send\",\n    value: function send(data) {\n      if (this.ws && this.isConnected) {\n        this.ws.send(JSON.stringify(data));\n      } else {\n        console.warn('WebSocket not connected');\n      }\n    }\n  }]);\n}();\nexport default new WebSocketService();","map":{"version":3,"names":["WebSocketService","_classCallCheck","ws","isConnected","messageListeners","reconnectAttempts","maxReconnectAttempts","reconnectInterval","_createClass","key","value","connect","_this","url","arguments","length","undefined","WebSocket","onopen","console","log","notifyConnectionStatus","onmessage","event","message","JSON","parse","data","forEach","callback","error","onclose","attemptReconnect","onerror","_this2","setTimeout","addMessageListener","push","removeMessageListener","index","indexOf","splice","status","connectionStatusListeners","addConnectionStatusListener","removeConnectionStatusListener","disconnect","close","send","stringify","warn"],"sources":["E:/Projects/SIH app zip/SIH app/src/services/WebSocketService.js"],"sourcesContent":["class WebSocketService {\r\n  constructor() {\r\n    this.ws = null;\r\n    this.isConnected = false;\r\n    this.messageListeners = [];\r\n    this.reconnectAttempts = 0;\r\n    this.maxReconnectAttempts = 5;\r\n    this.reconnectInterval = 3000; // 3 seconds\r\n  }\r\n\r\n  connect(url = 'ws://localhost:8080') {\r\n    try {\r\n      this.ws = new WebSocket(url);\r\n\r\n      this.ws.onopen = () => {\r\n        console.log('WebSocket connected');\r\n        this.isConnected = true;\r\n        this.reconnectAttempts = 0;\r\n        this.notifyConnectionStatus('Connected');\r\n      };\r\n\r\n      this.ws.onmessage = (event) => {\r\n        try {\r\n          const message = JSON.parse(event.data);\r\n          console.log('Received WebSocket message:', message);\r\n          \r\n          // Notify all listeners\r\n          this.messageListeners.forEach(callback => {\r\n            callback(message);\r\n          });\r\n        } catch (error) {\r\n          console.error('Error parsing WebSocket message:', error);\r\n        }\r\n      };\r\n\r\n      this.ws.onclose = () => {\r\n        console.log('WebSocket connection closed');\r\n        this.isConnected = false;\r\n        this.notifyConnectionStatus('Disconnected');\r\n        this.attemptReconnect();\r\n      };\r\n\r\n      this.ws.onerror = (error) => {\r\n        console.error('WebSocket error:', error);\r\n        this.isConnected = false;\r\n        this.notifyConnectionStatus('Error');\r\n      };\r\n\r\n    } catch (error) {\r\n      console.error('Failed to create WebSocket connection:', error);\r\n      this.notifyConnectionStatus('Failed to Connect');\r\n    }\r\n  }\r\n\r\n  attemptReconnect() {\r\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\r\n      this.reconnectAttempts++;\r\n      console.log(`Attempting to reconnect... (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\r\n      this.notifyConnectionStatus('Reconnecting...');\r\n      \r\n      setTimeout(() => {\r\n        this.connect();\r\n      }, this.reconnectInterval);\r\n    } else {\r\n      console.log('Max reconnection attempts reached');\r\n      this.notifyConnectionStatus('Connection Failed');\r\n    }\r\n  }\r\n\r\n  addMessageListener(callback) {\r\n    this.messageListeners.push(callback);\r\n  }\r\n\r\n  removeMessageListener(callback) {\r\n    const index = this.messageListeners.indexOf(callback);\r\n    if (index > -1) {\r\n      this.messageListeners.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  notifyConnectionStatus(status) {\r\n    // This will be used to notify components about connection status changes\r\n    this.connectionStatusListeners = this.connectionStatusListeners || [];\r\n    this.connectionStatusListeners.forEach(callback => callback(status));\r\n  }\r\n\r\n  addConnectionStatusListener(callback) {\r\n    this.connectionStatusListeners = this.connectionStatusListeners || [];\r\n    this.connectionStatusListeners.push(callback);\r\n  }\r\n\r\n  removeConnectionStatusListener(callback) {\r\n    if (this.connectionStatusListeners) {\r\n      const index = this.connectionStatusListeners.indexOf(callback);\r\n      if (index > -1) {\r\n        this.connectionStatusListeners.splice(index, 1);\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.ws) {\r\n      this.ws.close();\r\n      this.ws = null;\r\n      this.isConnected = false;\r\n      this.messageListeners = [];\r\n      this.connectionStatusListeners = [];\r\n    }\r\n  }\r\n\r\n  send(data) {\r\n    if (this.ws && this.isConnected) {\r\n      this.ws.send(JSON.stringify(data));\r\n    } else {\r\n      console.warn('WebSocket not connected');\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport default new WebSocketService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}