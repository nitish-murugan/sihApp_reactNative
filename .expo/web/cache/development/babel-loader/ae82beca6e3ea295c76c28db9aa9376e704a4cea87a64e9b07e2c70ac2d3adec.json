{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport mqtt from 'mqtt';\nvar MqttService = function () {\n  function MqttService() {\n    _classCallCheck(this, MqttService);\n    this.client = null;\n    this.isConnected = false;\n    this.messageListeners = new Map();\n  }\n  return _createClass(MqttService, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this = this;\n      var brokerUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'mqtt://192.168.43.109:1883';\n      if (this.client) {\n        this.client.end();\n      }\n      this.client = mqtt.connect(brokerUrl);\n      this.client.on('connect', function () {\n        console.log('MQTT Connected to broker');\n        _this.isConnected = true;\n      });\n      this.client.on('message', function (topic, message) {\n        try {\n          var payload = message.toString();\n          var jsonData = JSON.parse(payload);\n          if (_this.messageListeners.has(topic)) {\n            _this.messageListeners.get(topic).forEach(function (callback) {\n              callback(jsonData);\n            });\n          }\n        } catch (error) {\n          console.error('Error parsing MQTT message:', error);\n        }\n      });\n      this.client.on('error', function (err) {\n        console.error('MQTT Client Error:', err);\n        _this.isConnected = false;\n      });\n      this.client.on('close', function () {\n        console.log('MQTT Connection closed');\n        _this.isConnected = false;\n      });\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(topic, callback) {\n      if (!this.client || !this.isConnected) {\n        console.error('MQTT client not connected');\n        return;\n      }\n      if (!this.messageListeners.has(topic)) {\n        this.messageListeners.set(topic, []);\n      }\n      this.messageListeners.get(topic).push(callback);\n      this.client.subscribe(topic, function (err) {\n        if (err) {\n          console.error('MQTT Subscription failed:', err);\n        } else {\n          console.log(`Subscribed to topic: ${topic}`);\n        }\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(topic, callback) {\n      if (this.messageListeners.has(topic)) {\n        var listeners = this.messageListeners.get(topic);\n        var index = listeners.indexOf(callback);\n        if (index > -1) {\n          listeners.splice(index, 1);\n        }\n        if (listeners.length === 0) {\n          this.messageListeners.delete(topic);\n          if (this.client) {\n            this.client.unsubscribe(topic);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.client) {\n        this.client.end();\n        this.client = null;\n        this.isConnected = false;\n        this.messageListeners.clear();\n      }\n    }\n  }]);\n}();\nexport default new MqttService();","map":{"version":3,"names":["mqtt","MqttService","_classCallCheck","client","isConnected","messageListeners","Map","_createClass","key","value","connect","_this","brokerUrl","arguments","length","undefined","end","on","console","log","topic","message","payload","toString","jsonData","JSON","parse","has","get","forEach","callback","error","err","subscribe","set","push","unsubscribe","listeners","index","indexOf","splice","delete","disconnect","clear"],"sources":["E:/Projects/SIH app zip/SIH app/src/services/MqttService.js"],"sourcesContent":["import mqtt from 'mqtt';\r\n\r\nclass MqttService {\r\n  constructor() {\r\n    this.client = null;\r\n    this.isConnected = false;\r\n    this.messageListeners = new Map();\r\n  }\r\n\r\n  connect(brokerUrl = 'mqtt://192.168.43.109:1883') {\r\n    if (this.client) {\r\n      this.client.end();\r\n    }\r\n\r\n    this.client = mqtt.connect(brokerUrl);\r\n\r\n    this.client.on('connect', () => {\r\n      console.log('MQTT Connected to broker');\r\n      this.isConnected = true;\r\n    });\r\n\r\n    this.client.on('message', (topic, message) => {\r\n      try {\r\n        const payload = message.toString();\r\n        const jsonData = JSON.parse(payload);\r\n        \r\n        // Notify all listeners for this topic\r\n        if (this.messageListeners.has(topic)) {\r\n          this.messageListeners.get(topic).forEach(callback => {\r\n            callback(jsonData);\r\n          });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error parsing MQTT message:', error);\r\n      }\r\n    });\r\n\r\n    this.client.on('error', (err) => {\r\n      console.error('MQTT Client Error:', err);\r\n      this.isConnected = false;\r\n    });\r\n\r\n    this.client.on('close', () => {\r\n      console.log('MQTT Connection closed');\r\n      this.isConnected = false;\r\n    });\r\n  }\r\n\r\n  subscribe(topic, callback) {\r\n    if (!this.client || !this.isConnected) {\r\n      console.error('MQTT client not connected');\r\n      return;\r\n    }\r\n\r\n    // Add callback to listeners\r\n    if (!this.messageListeners.has(topic)) {\r\n      this.messageListeners.set(topic, []);\r\n    }\r\n    this.messageListeners.get(topic).push(callback);\r\n\r\n    // Subscribe to topic\r\n    this.client.subscribe(topic, (err) => {\r\n      if (err) {\r\n        console.error('MQTT Subscription failed:', err);\r\n      } else {\r\n        console.log(`Subscribed to topic: ${topic}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  unsubscribe(topic, callback) {\r\n    if (this.messageListeners.has(topic)) {\r\n      const listeners = this.messageListeners.get(topic);\r\n      const index = listeners.indexOf(callback);\r\n      if (index > -1) {\r\n        listeners.splice(index, 1);\r\n      }\r\n      \r\n      // If no more listeners, unsubscribe from MQTT\r\n      if (listeners.length === 0) {\r\n        this.messageListeners.delete(topic);\r\n        if (this.client) {\r\n          this.client.unsubscribe(topic);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  disconnect() {\r\n    if (this.client) {\r\n      this.client.end();\r\n      this.client = null;\r\n      this.isConnected = false;\r\n      this.messageListeners.clear();\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport default new MqttService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}