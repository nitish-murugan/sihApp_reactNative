{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as Notifications from 'expo-notifications';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nNotifications.setNotificationHandler({\n  handleNotification: function () {\n    var _handleNotification = _asyncToGenerator(function* () {\n      return {\n        shouldShowAlert: true,\n        shouldPlaySound: true,\n        shouldSetBadge: false\n      };\n    });\n    function handleNotification() {\n      return _handleNotification.apply(this, arguments);\n    }\n    return handleNotification;\n  }()\n});\nvar NotificationService = function () {\n  function NotificationService() {\n    _classCallCheck(this, NotificationService);\n    this.lastNotifications = {\n      voltage: {},\n      powerFactor: {}\n    };\n    this.cooldownTime = 30000;\n  }\n  return _createClass(NotificationService, [{\n    key: \"initialize\",\n    value: function () {\n      var _initialize = _asyncToGenerator(function* () {\n        var _yield$Notifications$ = yield Notifications.getPermissionsAsync(),\n          existingStatus = _yield$Notifications$.status;\n        var finalStatus = existingStatus;\n        if (existingStatus !== 'granted') {\n          var _yield$Notifications$2 = yield Notifications.requestPermissionsAsync(),\n            status = _yield$Notifications$2.status;\n          finalStatus = status;\n        }\n        if (finalStatus !== 'granted') {\n          console.log('Notification permissions not granted');\n          return false;\n        }\n        console.log('Notification permissions granted');\n        return true;\n      });\n      function initialize() {\n        return _initialize.apply(this, arguments);\n      }\n      return initialize;\n    }()\n  }, {\n    key: \"showVoltageAlert\",\n    value: function () {\n      var _showVoltageAlert = _asyncToGenerator(function* (meterId, meterName) {\n        var now = Date.now();\n        var lastAlert = this.lastNotifications.voltage[meterId];\n        if (lastAlert && now - lastAlert < this.cooldownTime) {\n          return;\n        }\n        this.lastNotifications.voltage[meterId] = now;\n        yield this.sendNotification('⚠️ Voltage Alert', `${meterName}: Voltage has dropped to 0V! Check electrical connection.`, {\n          type: 'voltage_alert',\n          meterId: meterId,\n          meterName: meterName\n        });\n        Alert.alert('⚠️ Voltage Alert', `${meterName}: Voltage has dropped to 0V!\\n\\nThis may indicate:\\n• Power outage\\n• Disconnected cables\\n• Circuit breaker tripped\\n\\nPlease check the electrical connection immediately.`, [{\n          text: 'OK',\n          style: 'default'\n        }]);\n      });\n      function showVoltageAlert(_x, _x2) {\n        return _showVoltageAlert.apply(this, arguments);\n      }\n      return showVoltageAlert;\n    }()\n  }, {\n    key: \"showPowerFactorAlert\",\n    value: function () {\n      var _showPowerFactorAlert = _asyncToGenerator(function* (meterId, meterName, powerFactor) {\n        var now = Date.now();\n        var lastAlert = this.lastNotifications.powerFactor[meterId];\n        if (lastAlert && now - lastAlert < this.cooldownTime) {\n          return;\n        }\n        this.lastNotifications.powerFactor[meterId] = now;\n        var pfPercentage = Math.round(powerFactor * 100);\n        yield this.sendNotification('📉 Low Power Factor Alert', `${meterName}: Power Factor is ${powerFactor} (${pfPercentage}%) - Below optimal range!`, {\n          type: 'power_factor_alert',\n          meterId: meterId,\n          meterName: meterName,\n          powerFactor: powerFactor\n        });\n        Alert.alert('📉 Low Power Factor Alert', `${meterName}: Power Factor is ${powerFactor} (${pfPercentage}%)\\n\\nOptimal range: ≥ 0.85 (85%)\\n\\nLow power factor may cause:\\n• Higher electricity bills\\n• Equipment inefficiency\\n• Voltage drops\\n\\nConsider installing power factor correction equipment.`, [{\n          text: 'OK',\n          style: 'default'\n        }]);\n      });\n      function showPowerFactorAlert(_x3, _x4, _x5) {\n        return _showPowerFactorAlert.apply(this, arguments);\n      }\n      return showPowerFactorAlert;\n    }()\n  }, {\n    key: \"sendNotification\",\n    value: function () {\n      var _sendNotification = _asyncToGenerator(function* (title, body) {\n        var data = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n        try {\n          yield Notifications.scheduleNotificationAsync({\n            content: {\n              title: title,\n              body: body,\n              data: data,\n              sound: 'default',\n              priority: Notifications.AndroidNotificationPriority.HIGH\n            },\n            trigger: null\n          });\n          console.log('Notification sent:', title);\n        } catch (error) {\n          console.error('Error sending notification:', error);\n        }\n      });\n      function sendNotification(_x6, _x7) {\n        return _sendNotification.apply(this, arguments);\n      }\n      return sendNotification;\n    }()\n  }, {\n    key: \"clearNotificationHistory\",\n    value: function clearNotificationHistory() {\n      this.lastNotifications = {\n        voltage: {},\n        powerFactor: {}\n      };\n    }\n  }, {\n    key: \"areNotificationsEnabled\",\n    value: function () {\n      var _areNotificationsEnabled = _asyncToGenerator(function* () {\n        var _yield$Notifications$3 = yield Notifications.getPermissionsAsync(),\n          status = _yield$Notifications$3.status;\n        return status === 'granted';\n      });\n      function areNotificationsEnabled() {\n        return _areNotificationsEnabled.apply(this, arguments);\n      }\n      return areNotificationsEnabled;\n    }()\n  }]);\n}();\nexport default new NotificationService();","map":{"version":3,"names":["Notifications","Platform","Alert","setNotificationHandler","handleNotification","_handleNotification","_asyncToGenerator","shouldShowAlert","shouldPlaySound","shouldSetBadge","apply","arguments","NotificationService","_classCallCheck","lastNotifications","voltage","powerFactor","cooldownTime","_createClass","key","value","_initialize","_yield$Notifications$","getPermissionsAsync","existingStatus","status","finalStatus","_yield$Notifications$2","requestPermissionsAsync","console","log","initialize","_showVoltageAlert","meterId","meterName","now","Date","lastAlert","sendNotification","type","alert","text","style","showVoltageAlert","_x","_x2","_showPowerFactorAlert","pfPercentage","Math","round","showPowerFactorAlert","_x3","_x4","_x5","_sendNotification","title","body","data","length","undefined","scheduleNotificationAsync","content","sound","priority","AndroidNotificationPriority","HIGH","trigger","error","_x6","_x7","clearNotificationHistory","_areNotificationsEnabled","_yield$Notifications$3","areNotificationsEnabled"],"sources":["E:/Projects/SIH app zip/sihApp_reactNative/src/services/NotificationService.js"],"sourcesContent":["import * as Notifications from 'expo-notifications';\r\nimport { Platform, Alert } from 'react-native';\r\n\r\n// Configure notification behavior\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: true,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\n\r\nclass NotificationService {\r\n  constructor() {\r\n    this.lastNotifications = {\r\n      voltage: {}, // Track last voltage alert for each meter\r\n      powerFactor: {}, // Track last power factor alert for each meter\r\n    };\r\n    this.cooldownTime = 30000; // 30 seconds cooldown between same alerts\r\n  }\r\n\r\n  async initialize() {\r\n    // Request notification permissions\r\n    const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n    let finalStatus = existingStatus;\r\n\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Notifications.requestPermissionsAsync();\r\n      finalStatus = status;\r\n    }\r\n\r\n    if (finalStatus !== 'granted') {\r\n      console.log('Notification permissions not granted');\r\n      return false;\r\n    }\r\n\r\n    console.log('Notification permissions granted');\r\n    return true;\r\n  }\r\n\r\n  async showVoltageAlert(meterId, meterName) {\r\n    const now = Date.now();\r\n    const lastAlert = this.lastNotifications.voltage[meterId];\r\n\r\n    // Check cooldown period\r\n    if (lastAlert && (now - lastAlert) < this.cooldownTime) {\r\n      return; // Skip if within cooldown period\r\n    }\r\n\r\n    this.lastNotifications.voltage[meterId] = now;\r\n\r\n    // Show notification\r\n    await this.sendNotification(\r\n      '⚠️ Voltage Alert',\r\n      `${meterName}: Voltage has dropped to 0V! Check electrical connection.`,\r\n      {\r\n        type: 'voltage_alert',\r\n        meterId: meterId,\r\n        meterName: meterName,\r\n      }\r\n    );\r\n\r\n    // Also show in-app alert for immediate attention\r\n    Alert.alert(\r\n      '⚠️ Voltage Alert',\r\n      `${meterName}: Voltage has dropped to 0V!\\n\\nThis may indicate:\\n• Power outage\\n• Disconnected cables\\n• Circuit breaker tripped\\n\\nPlease check the electrical connection immediately.`,\r\n      [{ text: 'OK', style: 'default' }]\r\n    );\r\n  }\r\n\r\n  async showPowerFactorAlert(meterId, meterName, powerFactor) {\r\n    const now = Date.now();\r\n    const lastAlert = this.lastNotifications.powerFactor[meterId];\r\n\r\n    // Check cooldown period\r\n    if (lastAlert && (now - lastAlert) < this.cooldownTime) {\r\n      return; // Skip if within cooldown period\r\n    }\r\n\r\n    this.lastNotifications.powerFactor[meterId] = now;\r\n\r\n    const pfPercentage = Math.round(powerFactor * 100);\r\n\r\n    // Show notification\r\n    await this.sendNotification(\r\n      '📉 Low Power Factor Alert',\r\n      `${meterName}: Power Factor is ${powerFactor} (${pfPercentage}%) - Below optimal range!`,\r\n      {\r\n        type: 'power_factor_alert',\r\n        meterId: meterId,\r\n        meterName: meterName,\r\n        powerFactor: powerFactor,\r\n      }\r\n    );\r\n\r\n    // Also show in-app alert\r\n    Alert.alert(\r\n      '📉 Low Power Factor Alert',\r\n      `${meterName}: Power Factor is ${powerFactor} (${pfPercentage}%)\\n\\nOptimal range: ≥ 0.85 (85%)\\n\\nLow power factor may cause:\\n• Higher electricity bills\\n• Equipment inefficiency\\n• Voltage drops\\n\\nConsider installing power factor correction equipment.`,\r\n      [{ text: 'OK', style: 'default' }]\r\n    );\r\n  }\r\n\r\n  async sendNotification(title, body, data = {}) {\r\n    try {\r\n      await Notifications.scheduleNotificationAsync({\r\n        content: {\r\n          title: title,\r\n          body: body,\r\n          data: data,\r\n          sound: 'default',\r\n          priority: Notifications.AndroidNotificationPriority.HIGH,\r\n        },\r\n        trigger: null, // Show immediately\r\n      });\r\n\r\n      console.log('Notification sent:', title);\r\n    } catch (error) {\r\n      console.error('Error sending notification:', error);\r\n    }\r\n  }\r\n\r\n  // Method to clear notification history (for testing)\r\n  clearNotificationHistory() {\r\n    this.lastNotifications = {\r\n      voltage: {},\r\n      powerFactor: {},\r\n    };\r\n  }\r\n\r\n  // Method to check if notifications are enabled\r\n  async areNotificationsEnabled() {\r\n    const { status } = await Notifications.getPermissionsAsync();\r\n    return status === 'granted';\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport default new NotificationService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}